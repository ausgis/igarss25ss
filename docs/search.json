[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IEEE IGARSS 2025 Summer School",
    "section": "",
    "text": "Preface\nTopic:Tools for remote sensing and geospatial intelligence analysis: An example of climate impact on bushfire.\n\n\n\n\n\n\nNote\n\n\n\nIn each section, we will include Tools, Aim, Description of steps, and Code.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "sec1.html",
    "href": "sec1.html",
    "title": "\n1  Remote sensing data collection\n",
    "section": "",
    "text": "1.1 Define study area\nFigure 1.1: The location of study area, West Daly, in Australia",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Remote sensing data collection</span>"
    ]
  },
  {
    "objectID": "sec1.html#collecting-bushfire-data",
    "href": "sec1.html#collecting-bushfire-data",
    "title": "\n1  Remote sensing data collection\n",
    "section": "\n1.2 Collecting bushfire data",
    "text": "1.2 Collecting bushfire data\n\n\n\n\n\n\nAim\n\n\n\nThis code is designed to compute and export the annual burned area from the MODIS MCD64A1 dataset using Google Earth Engine (GEE).\n\n\n\n\n\n\n\n\nDescription of steps\n\n\n\n\nLoad the MODIS MCD64A1 burned area dataset from GEE.\nDefine a function to clip and export burned area data by year.\nSet a time range (January 1st to December 31st of the given year).\nFilter the dataset for the selected year and extract the burned area information.\nApply an aggregation method (e.g., mean) to summarize burned area data.\nClip the data to the Region of Interest (ROI).\nExport the processed burned area data to Google Drive as a GeoTIFF.\nLoop through the desired years (2023-2024) and execute the function.\n\n\n\n// Load the MODIS MCD64A1 dataset\nvar dataset = ee.ImageCollection(\"MODIS/061/MCD64A1\");\n\n// Define a function to clip the dataset and export it by year\nfunction exportYearlyBurnedArea(year) {\n  // Create a date range for the specific year\n  var startDate = ee.Date.fromYMD(year, 1, 1);\n  var endDate = startDate.advance(1, 'year');\n\n  // Filter the dataset for the specific year and clip to the ROI\n  var yearlyBurnedArea = dataset.filterDate(startDate, endDate)\n                                .select('BurnDate')\n                                .mean()  // Or use another appropriate aggregation method\n                                .clip(roi.geometry().bounds());\n\n  // Export the processed data\n  Export.image.toDrive({\n    image: yearlyBurnedArea,\n    description: 'BurnedArea_' + year,\n    scale: 500,  // Adjust resolution as needed\n    region: roi,\n    fileFormat: 'GeoTIFF'\n  });\n}\n\n// Loop through and export data for the years 2000 to 2023\nfor (var year = 2023; year &lt;= 2024; year++) {\n  exportYearlyBurnedArea(year);\n}\nThe GEE code link: https://code.earthengine.google.com/c4c9731308de7f49c6e468c3daa8cb03 .",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Remote sensing data collection</span>"
    ]
  },
  {
    "objectID": "sec1.html#collecting-climate-data",
    "href": "sec1.html#collecting-climate-data",
    "title": "\n1  Remote sensing data collection\n",
    "section": "\n1.3 Collecting climate data",
    "text": "1.3 Collecting climate data\n\nTemperature\n\n\n\n\n\n\n\nAim\n\n\n\nThis code is designed to compute and export the annual mean temperature from the ERA5-Land Hourly Temperature dataset using GEE.\n\n\n\n\n\n\n\n\nDescription of steps\n\n\n\n\nLoad ERA5 hourly temperature data from Google Earth Engine.\nDefine a function to compute the annual mean temperature.\nSet a time range (January 1st to December 31st of the given year).\nFilter the dataset for the given year and compute the mean temperature.\nConvert temperature from Kelvin to Celsius.\nClip the data to the ROI.\nExport the processed temperature data to Google Drive as a GeoTIFF.\nLoop through the desired years and execute the function.\n\n\n\n// Load the ERA5 daily temperature dataset\nvar dataset = ee.ImageCollection(\"ECMWF/ERA5_LAND/HOURLY\");\n\n// Define a function to calculate and export the annual mean temperature\nfunction exportYearlyTemperature(year) {\n  // Create the date range\n  var startDate = ee.Date.fromYMD(year, 1, 1);\n  var endDate = startDate.advance(1, 'year');\n\n  // Filter the dataset and compute the annual mean temperature (unit: K)\n  var yearlyTemperature = dataset.filterDate(startDate, endDate)\n                                 .select('temperature_2m')\n                                 .mean()  // Compute annual mean temperature\n                                 .subtract(273.15)  // Convert to Celsius\n                                 .clip(roi.geometry().bounds());\n\n  // Export the result to Google Drive\n  Export.image.toDrive({\n    image: yearlyTemperature,\n    description: 'Tem' + year,\n    scale: 5000,  // ERA5 resolution, recommended 5km (5000m)\n    region: roi,\n    fileFormat: 'GeoTIFF'\n  });\n}\n\n// Loop to calculate the annual mean temperature for the years 2000-2024\nfor (var year = 2002; year &lt;= 2002; year++) {\n  exportYearlyTemperature(year);\n}\nThe GEE code link: https://code.earthengine.google.com/5a7f743bb1d0bd174f1d199e26dc4d61 .\n\nPrecipitation\n\n\n\n\n\n\n\nAim\n\n\n\nThis code is designed to compute and export the annual cumulative precipitation from the CHIRPS 5-day interval precipitation dataset using GEE.\n\n\n\n\n\n\n\n\nDescription of steps\n\n\n\n\nLoad CHIRPS 5-day interval precipitation data from Google Earth Engine.\n\nDefine a function to compute the annual cumulative precipitation.\n\nSet a time range (January 1st to December 31st of the given year).\n\nFilter the dataset for the given year and compute the total precipitation.\n\nClip the data** to the ROI.\n\nExport the processed precipitation data to Google Drive as a GeoTIFF.\n\nLoop through the desired years (2000-2024) and execute the function.\n\n\n\n// Load the CHIRPS dataset (5-day interval precipitation)\nvar dataset = ee.ImageCollection(\"UCSB-CHG/CHIRPS/PENTAD\");\n\n// Define a function to calculate and export the annual cumulative precipitation\nfunction exportYearlyPrecipitation(year) {\n  // Create the date range\n  var startDate = ee.Date.fromYMD(year, 1, 1);\n  var endDate = startDate.advance(1, 'year');\n\n  // Filter the dataset and compute the total precipitation for the year\n  var yearlyPrecipitation = dataset.filterDate(startDate, endDate)\n                                   .select('precipitation')\n                                   .sum()  // Compute annual total precipitation\n                                   .clip(roi.geometry().bounds());\n\n  // Export the result to Google Drive\n  Export.image.toDrive({\n    image: yearlyPrecipitation,\n    description: 'Pre' + year,\n    scale: 5000,  // CHIRPS resolution (~5.5 km), adjustable\n    region: roi,\n    fileFormat: 'GeoTIFF'\n  });\n}\n\n// Loop to compute annual cumulative precipitation for the years 2000-2024\nfor (var year = 2000; year &lt;= 2024; year++) {\n  exportYearlyPrecipitation(year);\n}\nThe GEE code link: https://code.earthengine.google.com/e8b09a65c7d506243e0895d7b6af4e41 .",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Remote sensing data collection</span>"
    ]
  },
  {
    "objectID": "sec2.html",
    "href": "sec2.html",
    "title": "2  Temporal analysis for remote sensing data",
    "section": "",
    "text": "2.1 Temporal trend analysis for bushfire\nCode (R version):\nCode (Python version):",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Temporal analysis for remote sensing data</span>"
    ]
  },
  {
    "objectID": "sec2.html#temporal-correlation-analysis-between-bushfire-and-climate",
    "href": "sec2.html#temporal-correlation-analysis-between-bushfire-and-climate",
    "title": "2  Temporal analysis for remote sensing data",
    "section": "2.2 Temporal correlation analysis between bushfire and climate",
    "text": "2.2 Temporal correlation analysis between bushfire and climate\n\n\n\n\n\n\nAim\n\n\n\nThis code is designed to compute the Spearman correlation coefficients and p-values between burned area and precipitation/temperature for each grid cell over the years 2000-2024, and save the results as a new shapefile.\n\n\n\n\n\n\n\n\nDescription of steps\n\n\n\n\nLoad necessary libraries (sf for spatial data and dplyr for data manipulation).\nRead the shapefile containing burned area, precipitation, and temperature data.\nExtract column names corresponding to:\nBurned area (BA_2000 to BA_2024)\nPrecipitation (Pre2000 to Pre2024)\nTemperature (Tem2000 to Tem2024)\nCompute the Spearman correlation for each grid cell:\nBurned area vs. Precipitation (cor_BA_Pre)\nBurned area vs. Temperature (cor_BA_Tem)\nExtract the correlation coefficient (estimate) and p-value (p.value) for statistical significance.\nSave the updated shapefile containing correlation results.\n\n\n\nCode (R version):\n# Load necessary libraries\nlibrary(sf)\nlibrary(dplyr)\n\n# Read the shapefile\ngrid &lt;- st_read(\"/your_path_here/grid5_Sta.shp\")\n\n# Extract column names (ensure column order matches years)\nba_cols &lt;- paste0(\"BA_\", 2000:2024)   # Burned area columns\npre_cols &lt;- paste0(\"Pre\", 2000:2024)  # Precipitation columns\ntem_cols &lt;- paste0(\"Tem\", 2000:2024)  # Temperature columns\n\n# Compute the Spearman correlation and p-values for each grid cell\ngrid &lt;- grid %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    cor_BA_Pre = cor.test(as.numeric(c_across(all_of(ba_cols))), \n                          as.numeric(c_across(all_of(pre_cols))), \n                          method = \"spearman\", use = \"complete.obs\")$estimate,\n    p_BA_Pre = cor.test(as.numeric(c_across(all_of(ba_cols))), \n                        as.numeric(c_across(all_of(pre_cols))), \n                        method = \"spearman\", use = \"complete.obs\")$p.value,\n    \n    cor_BA_Tem = cor.test(as.numeric(c_across(all_of(ba_cols))), \n                          as.numeric(c_across(all_of(tem_cols))), \n                          method = \"spearman\", use = \"complete.obs\")$estimate,\n    p_BA_Tem = cor.test(as.numeric(c_across(all_of(ba_cols))), \n                        as.numeric(c_across(all_of(tem_cols))), \n                        method = \"spearman\", use = \"complete.obs\")$p.value\n  ) %&gt;%\n  ungroup()\n\n# Save the new shapefile\nst_write(grid, \"/your_path_here/grid5_Cor.shp\", delete_layer = TRUE)\nCode (Python version):\nimport geopandas as gpd\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import pearsonr\n\n# Read the Shapefile\ngdf = gpd.read_file(\"/your_path_here/grid5_Sta_slope.shp\")\n\n# Extract column names for the time series\nyears = list(range(2000, 2025))  # 2000 to 2024\nba_columns = [f\"BA_{year}\" for year in years]\ntem_columns = [f\"Tem{year}\" for year in years]\npre_columns = [f\"Pre{year}\" for year in years]\n\n# Ensure all relevant columns exist in the dataset\nba_columns = [col for col in ba_columns if col in gdf.columns]\ntem_columns = [col for col in tem_columns if col in gdf.columns]\npre_columns = [col for col in pre_columns if col in gdf.columns]\n\n# Check if any required columns are missing\nif not ba_columns or not tem_columns or not pre_columns:\n    raise ValueError(\"BA, Tem, or Pre-related columns are missing. Please check the data file.\")\n\nprint(\"BA Columns:\", ba_columns)\nprint(\"Tem Columns:\", tem_columns)\nprint(\"Pre Columns:\", pre_columns)\n\n# Ensure all data columns are numeric\nfor col in ba_columns + tem_columns + pre_columns:\n    gdf[col] = pd.to_numeric(gdf[col], errors='coerce')\n\n# Function to compute Pearson correlation (excluding zero values)\ndef compute_correlation(row, x_columns):\n    ba_values = row[ba_columns].values.astype(float)\n    x_values = row[x_columns].values.astype(float)\n    \n    # Check if arrays are empty\n    if len(ba_values) == 0 or len(x_values) == 0:\n        return np.nan, np.nan\n    \n    # Filter out NaN and zero values\n    mask = (ba_values != 0) & (x_values != 0) & ~np.isnan(ba_values) & ~np.isnan(x_values)\n    ba_filtered = ba_values[mask]\n    x_filtered = x_values[mask]\n    \n    # Ensure both arrays have at least two valid values\n    if len(ba_filtered) &lt; 2 or len(x_filtered) &lt; 2:\n        return np.nan, np.nan\n    \n    correlation, p_value = pearsonr(ba_filtered, x_filtered)\n    return correlation, p_value\n\n# Compute Pearson correlation and significance level between BA and Tem\ngdf[[\"BA_Tem_corr\", \"BA_Tem_pval\"]] = gdf.apply(lambda row: compute_correlation(row, tem_columns), axis=1, result_type='expand')\n\n# Compute Pearson correlation and significance level between BA and Pre\ngdf[[\"BA_Pre_corr\", \"BA_Pre_pval\"]] = gdf.apply(lambda row: compute_correlation(row, pre_columns), axis=1, result_type='expand')\n\n# Save the results\ngdf.to_file(\"/your_path_here/grid5_Sta_corr.shp\")\n\nprint(\"Pearson correlation analysis between BA and Tem, as well as BA and Pre, has been completed (excluding zero values). Results saved.\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Temporal analysis for remote sensing data</span>"
    ]
  },
  {
    "objectID": "sec3.html",
    "href": "sec3.html",
    "title": "\n3  Spatial analysis for remote sensing data\n",
    "section": "",
    "text": "3.1 Spatial hotspot identification\nWe demonstrate a spatial analysis workflow using the 2024 climate and bushfire data as an example.\nWe will perform spatial hot spot and cold spot analysis using the rgeoda package and conduct spatial stratified heterogeneity analysis using the gdverse package.\nYou can install the required packages using the following commands in the R console:\nNow we read the data to R and perform some basic data exploration：\nSince the row and column numbers of the three rasters are not aligned, we first convert the non-NA cells of the temperature raster into a spatial polygon format. Then, we perform zonal statistics on temperature and wildfire data, and finally, remove all NA values corresponding to the three variables.\nsave the data to a shapefile:\nCodelibrary(sf)\nlibrary(rgeoda)\nlibrary(ggplot2)\n\nburnedarea = read_sf('./data/3. Spatial analysis/burnedarea_2024.shp')\nqueen_w = queen_weights(burnedarea)\nlisa = local_gstar(queen_w,  burnedarea[\"burnedarea\"])\ncats = lisa_clusters(lisa,cutoff = 0.05)\nburnedarea$hcp = factor(lisa_labels(lisa)[cats + 1],level = lisa_labels(lisa))\n\np_color = lisa_colors(lisa)\nnames(p_color) = lisa_labels(lisa)\np_label = lisa_labels(lisa)[sort(unique(cats + 1))]\nggplot(burnedarea) +\n  geom_sf(aes(fill = hcp)) +\n  scale_fill_manual(\n    values = p_color, \n    labels = p_label) +\n  theme_minimal() +\n  labs(fill = \"Cluster Type\")\n\n\n\n\n\n\nFigure 3.3: Bushfire burned area spatial hotspot analysis",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Spatial analysis for remote sensing data</span>"
    ]
  },
  {
    "objectID": "sec3.html#geographical-detector-for-spatial-heterogeneity-and-factor-analysis",
    "href": "sec3.html#geographical-detector-for-spatial-heterogeneity-and-factor-analysis",
    "title": "\n3  Spatial analysis for remote sensing data\n",
    "section": "\n3.2 Geographical detector for spatial heterogeneity and factor analysis",
    "text": "3.2 Geographical detector for spatial heterogeneity and factor analysis\n\n\n\n\n\n\nAim\n\n\n\nThis step is designed to identify the climatic driving factors of bushfire burned area. We will use the gdverse package to analyze the power of determinant of climatic drivers on bushfire burned area based on the optimal parameter geographical detector model.\n\n\n\n\n\n\n\n\nDescription of steps\n\n\n\n\nLoad necessary libraries (sf for spatial data and gdverse for geographical detector analysis).\nRead the shapefile containing burned area and climate data.\nRun the OPGD model.\nPlot the result.\n\n\n\n\nCodelibrary(sf)\nlibrary(gdverse)\n\nburnedarea = read_sf('./data/3. Spatial analysis/burnedarea_2024.shp')\nopgd.m = opgd(burnedarea~tem+pre, data = burnedarea, discnum = 3:15)\nopgd.m\n# ***   Optimal Parameters-based Geographical Detector     \n#                 Factor Detector            \n# \n# | variable | Q-statistic | P-value  |\n# |:--------:|:-----------:|:--------:|\n# |   tem    |   0.1318    | 1.23e-10 |\n# |   pre    |   0.0719    | 8.06e-05 |\nplot(opgd.m)\n\n\n\n\n\n\nFigure 3.4: Climatic driving factors of bushfire burned area",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Spatial analysis for remote sensing data</span>"
    ]
  },
  {
    "objectID": "sec4.html",
    "href": "sec4.html",
    "title": "4  Geospatial artificial intelligence (GeoAI) for remote sensing data",
    "section": "",
    "text": "4.1 GeoAI for spatial prediction of future bushfire",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Geospatial artificial intelligence (GeoAI) for remote sensing data</span>"
    ]
  },
  {
    "objectID": "sec4.html#geoai-for-spatial-prediction-of-future-bushfire",
    "href": "sec4.html#geoai-for-spatial-prediction-of-future-bushfire",
    "title": "4  Geospatial artificial intelligence (GeoAI) for remote sensing data",
    "section": "",
    "text": "4.1.1 Future climate data collection\n\n\n4.1.2 GeoAI modelling\n\n\n4.1.3 Spatial prediction\n\n\n4.1.4 Analysing future bushfire patterns",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Geospatial artificial intelligence (GeoAI) for remote sensing data</span>"
    ]
  },
  {
    "objectID": "sec1.html#aim",
    "href": "sec1.html#aim",
    "title": "\n1  Remote sensing data collection\n",
    "section": "\n1.3 🎯 Aim",
    "text": "1.3 🎯 Aim\nThis code is designed to compute and export the annual burned area from the MODIS MCD64A1 dataset using Google Earth Engine (GEE).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Remote sensing data collection</span>"
    ]
  },
  {
    "objectID": "sec2.html#temporal-trend-analysis-for-bushfire",
    "href": "sec2.html#temporal-trend-analysis-for-bushfire",
    "title": "2  Temporal analysis for remote sensing data",
    "section": "",
    "text": "Aim\n\n\n\nThis code is designed to compute the linear trend (slope and intercept) of burned area over time for each grid cell in a shapefile using linear regression, and save the results as a new shapefile.\n\n\n\n\n\n\n\n\nDescription of steps\n\n\n\n\nLoad necessary libraries (sf for spatial data and dplyr for data manipulation).\nRead the shapefile containing burned area data.\nExtract burned area column names corresponding to years 2000-2024.\nCreate a sequence of years as the independent variable for regression.\nPerform linear regression for each grid cell to estimate slope and intercept:\nUse lm() to fit a linear model with years as the independent variable.\nExtract the slope (trend of burned area change) and intercept.\nRemove the regression model objects to keep only numerical results.\nSave the updated shapefile with computed slope and intercept values.\n\n\n\n\n# Load necessary libraries\nlibrary(sf)\nlibrary(dplyr)\n\n# Read the shapefile\ngrid &lt;- st_read(\"/your_path_here/grid5_Sta.shp\")\n\n# Extract column names (ensure column order matches years)\nba_cols &lt;- paste0(\"BA_\", 2000:2024)  # Burned area for 25 years\n\n# Create a sequence of years (independent variable)\nyears &lt;- 2000:2024\n\n# Compute the regression slope and intercept for each grid cell\ngrid &lt;- grid %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    lm_model = list(lm(as.numeric(c_across(all_of(ba_cols))) ~ years)),  # Linear regression\n    slope = coef(lm_model)[2],   # Slope\n    intercept = coef(lm_model)[1]  # Intercept\n  ) %&gt;%\n  select(-lm_model) %&gt;%  # Remove model object\n  ungroup()\n\n# Save the new shapefile\nst_write(grid, \"/your_path_here/grid5_Linear.shp\", delete_layer = TRUE)\n\nimport geopandas as gpd\nimport numpy as np\nfrom scipy.stats import linregress\n\n# Read the Shapefile\ngdf = gpd.read_file(\"/your_path_here/grid5_Sta.shp\")\n\n# Extract column names for the time series\nyears = list(range(2000, 2025))  # 2000 to 2024\ncolumns = [f\"BA_{year}\" for year in years]\n\n# Ensure all columns exist in the dataset\ncolumns = [col for col in columns if col in gdf.columns]\n\n# Time axis\ntime = np.array(years[:len(columns)])\n\ndef compute_slope(row):\n    y_values = row[columns].values.astype(float)  # Retrieve the time series data for the pixel\n    if np.all(np.isnan(y_values)):  # If all values are NaN, return NaN\n        return np.nan\n    slope, _, _, _, _ = linregress(time, y_values)\n    return slope\n\n# Compute the slope and store it in a new column\ngdf[\"BA_slope\"] = gdf.apply(compute_slope, axis=1)\n\n# Save the results\ngdf.to_file(\"/your_path_here/grid5_Sta_slope.shp\")\n\nprint(\"Linear regression calculation completed, results saved.\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Temporal analysis for remote sensing data</span>"
    ]
  },
  {
    "objectID": "sec3.html#spatial-hotspot-identification",
    "href": "sec3.html#spatial-hotspot-identification",
    "title": "\n3  Spatial analysis for remote sensing data\n",
    "section": "",
    "text": "Aim\n\n\n\nThis step is designed to identify the spatial hot and cold spots of bushfire burned areas, which will be performed using the rgeoda package.\n\n\n\n\n\n\n\n\nDescription of steps\n\n\n\n\nLoad necessary libraries (sf for spatial data, rgeoda for spatial analysis, ggplot2 for data visualization).\nRead the shapefile containing burned area and climate data.\nCreate the spatial weight matrix.\nRun spatial hotspot analysis.\nPlot the result.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Spatial analysis for remote sensing data</span>"
    ]
  }
]